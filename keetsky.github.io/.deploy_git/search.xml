<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CMakeLists 生成动态库与静态库</title>
    <url>/2018/02/10/CMakeLists%20%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%8E%E9%9D%99%E6%80%81%E5%BA%93/</url>
    <content><![CDATA[<h3 id="CMakeLists-生成动态库与静态库"><a href="#CMakeLists-生成动态库与静态库" class="headerlink" title="　CMakeLists 生成动态库与静态库"></a>　CMakeLists 生成动态库与静态库</h3><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">├── bin</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── person.h</span><br><span class="line">├── lib</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── CMakeLists.txt</span><br><span class="line">    │   └── main.cpp</span><br><span class="line">    └── person</span><br><span class="line">        ├── CMakeLists.txt</span><br><span class="line">        └── person.cpp</span><br></pre></td></tr></table></figure>
<p><code>最后生成的库文件将会放在lib目录下，并且生成的库文件带版本号</code></p>
<ul>
<li><p><strong>顶层CMakeLists.txt</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">cmake_minimum_required</span><span class="params">(VERSION <span class="number">3.3</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">project</span><span class="params">(libraryTest CXX)</span></span></span><br><span class="line"><span class="function"><span class="title">add_subdirectory</span><span class="params">(src)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>src/CMakeLists.txt</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># src CMakeLists.txt</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(main)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(person)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>src/main/CMakeLists.txt</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># contacts CMakeLists.txt</span></span><br><span class="line">aux_source_directory(. srcs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/<span class="keyword">include</span>  )</span><br><span class="line"></span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line">add_executable( librarytest $&#123;srcs&#125;)</span><br><span class="line"></span><br><span class="line">link_directories($&#123;PROJECT_SOURCE_DIR&#125;/<span class="class"><span class="keyword">lib</span>)</span></span><br><span class="line"></span><br><span class="line">target_link_libraries(librarytest</span><br><span class="line">  person</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>src/person/CMakeLists.txt</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(. srcs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之前的添加动态库/静态库的方法</span></span><br><span class="line"><span class="comment"># 缺点：动态库与静态库的名字不能重名</span></span><br><span class="line"><span class="comment"># add_library(person SHARED $&#123;srcs&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成动态库目标</span></span><br><span class="line"><span class="keyword">add_library</span>(person SHARED <span class="variable">$&#123;srcs&#125;</span>)</span><br><span class="line"><span class="comment"># 生成静态库目标</span></span><br><span class="line"><span class="keyword">add_library</span>(person_static STATIC <span class="variable">$&#123;srcs&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定静态库的输出名称</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(person_static PROPERTIES OUTPUT_NAME <span class="string">"person"</span>)</span><br><span class="line"><span class="comment"># 使动态库和静态库同时存在</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(person PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span><br><span class="line"><span class="keyword">set_target_properties</span>(person_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定动态库版本</span></span><br><span class="line"><span class="comment"># VERSION 动态库版本</span></span><br><span class="line"><span class="comment"># SOVERSION API版本</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(person PROPERTIES VERSION <span class="number">1.0</span> SOVERSION <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>运行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta">$</span><span class="bash">cmake ..</span></span><br><span class="line"><span class="meta">$</span><span class="bash">make</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>PX4 安装与配置</title>
    <url>/2018/02/09/PX4-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://dev.px4.io/" target="_blank" rel="external">官网教程</a></p>
<h3 id="ubuntu-系统"><a href="#ubuntu-系统" class="headerlink" title="ubuntu 系统"></a>ubuntu 系统</h3><h4 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h4><p>把用户添加到用户组　“dialout”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -a -G dialout $USER</span><br></pre></td></tr></table></figure>
<p>然后注销后，重新登录，因为重新登录后所做的改变才会有效。</p>
<h4 id="安装-基于NuttX的硬件"><a href="#安装-基于NuttX的硬件" class="headerlink" title="安装-基于NuttX的硬件"></a>安装-基于NuttX的硬件</h4><p>Ubuntu配备了一系列代理管理，这会严重干扰任何机器人相关的串口（或usb串口），卸载掉它也不会有什么影响:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove modemmanager</span><br></pre></td></tr></table></figure>
<p>更新包列表和安装下面的依赖包。务必安装指定的版本的包.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install python-serial openocd \</span><br><span class="line">    flex bison libncurses5-<span class="built_in">dev</span> autoconf texinfo build-essential \</span><br><span class="line">    libftdi-<span class="built_in">dev</span> libtool zlib1g-<span class="built_in">dev</span> \</span><br><span class="line">    python-empy  -y</span><br></pre></td></tr></table></figure>
<p>在添加arm-none-eabi工具链之前，请确保删除残余，如果需要变更工具链也需要删除先前版本。</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove gcc-arm-none-eabi gdb-arm-none-eabi binutils-arm-none-eabi gcc-arm-embedded</span><br><span class="line">sudo<span class="built_in"> add-apt-repository </span>--remove ppa:team-gcc-arm-embedded/ppa</span><br></pre></td></tr></table></figure>
<p>如果gcc-arm-none-eabi版本导致PX4/Firmware编译错误，</p>
<h5 id="安装arm-none-eabi工具链"><a href="#安装arm-none-eabi工具链" class="headerlink" title="安装arm-none-eabi工具链"></a>安装arm-none-eabi工具链</h5><p>要求gcc版本&gt;=4.9 cmake 版本大于3.2，Ubuntu系统gcc为4.8,cmake 为3.2,所以需要重新安装新的版本<br>gcc-arm-none-eabi GCC 5.4版本</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">cd</span> ~</span><br><span class="line"><span class="symbol">wget</span> https://launchpad.net/gcc-<span class="meta">arm</span>-embedded/<span class="number">5</span>.<span class="number">0</span>/<span class="number">5</span>-<span class="number">2016</span>-<span class="built_in">q2</span>-update/+download/gcc-<span class="meta">arm</span>-none-eabi-<span class="number">5</span>_4-<span class="number">2016</span><span class="built_in">q2</span>-<span class="number">20160622</span>-linux.tar.<span class="keyword">bz2</span></span><br><span class="line"><span class="keyword">tar </span>-jxf gcc-<span class="meta">arm</span>-none-eabi-<span class="number">5</span>_4-<span class="number">2016</span><span class="built_in">q2</span>-<span class="number">20160622</span>-linux.tar.<span class="keyword">bz2</span></span><br><span class="line"><span class="keyword">exportline="export </span>PATH=$HOME/gcc-<span class="meta">arm</span>-none-eabi-<span class="number">5</span>_4-<span class="number">2016</span><span class="built_in">q2</span>/<span class="keyword">bin:\$PATH" </span>    #或直接在.<span class="keyword">bashrc末尾写入 </span><span class="meta">export</span> PATH<span class="symbol">=home</span>/keetsky/gcc-<span class="meta">arm</span>-none-eabi-<span class="number">5</span>_4-<span class="number">2016</span><span class="built_in">q2</span>/<span class="keyword">bin:\$PATH</span></span><br><span class="line"><span class="keyword">if </span>grep -Fxq <span class="string">"$exportline"</span> ~/.profile<span class="comment">; then echo nothing to do ; else echo $exportline &gt;&gt; ~/.profile; fi</span></span><br><span class="line">. ~/.profile</span><br></pre></td></tr></table></figure>
<p>gcc-arm-none-eabi GCC 4.9 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">cd</span> ~</span><br><span class="line">wget https://launchpad.net/gcc-arm-embedded/4.9/4.9-2015-q3-update/+download/gcc-arm-none-eabi-4_9-2015q3-20150921-linux.tar.bz2</span><br><span class="line">tar -jxf gcc-arm-none-eabi-4_9-2015q3-20150921-linux.tar.bz2</span><br><span class="line">exportline=<span class="string">"export PATH=<span class="variable">$HOME</span>/gcc-arm-none-eabi-4_9-2015q3/bin:\$PATH"</span></span><br><span class="line"><span class="keyword">if</span> grep -Fxq <span class="string">"<span class="variable">$exportline</span>"</span> ~/.profile; <span class="keyword">then</span> <span class="built_in">echo</span> nothing to <span class="keyword">do</span> ; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="variable">$exportline</span> &gt;&gt; ~/.profile; <span class="keyword">fi</span></span><br><span class="line">. ~/.profile</span><br></pre></td></tr></table></figure>
<p>也可通过源库安装，不过安装的是4.9版本</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:team-gcc-arm-embedded/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gcc-arm-embedded</span><br></pre></td></tr></table></figure>
<p>安装32位支持库（如果已经是运行在32位，那么可能会失败，并且此步骤可以跳过）：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">sudo dpkg --<span class="keyword">add</span>-architecture <span class="keyword">i386</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libc<span class="number">6</span>:<span class="keyword">i386</span> libgcc<span class="number">1</span>:<span class="keyword">i386</span> libstdc++<span class="number">5</span>:<span class="keyword">i386</span> libstdc++<span class="number">6</span>:<span class="keyword">i386</span></span><br><span class="line">sudo apt-get install gcc<span class="number">-4.6</span>-base:<span class="keyword">i386</span></span><br></pre></td></tr></table></figure>
<p>arm-none-dabi-gcc测试 </p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">arm-none-eabi-gcc <span class="comment">--version   #查看输出对否有如下输出</span></span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line">arm-none-eabi-gcc (GNU Tools <span class="keyword">for</span> ARM Embedded Processors) <span class="number">5.4</span>.<span class="number">1</span> <span class="number">20160609</span> (<span class="keyword">release</span>) [ARM/embedded-<span class="number">5</span>-branch revision <span class="number">237715</span>]</span><br><span class="line">Copyright (C) <span class="number">2015</span> Free Software Foundation, Inc.</span><br><span class="line">This <span class="keyword">is</span> free software; see the source <span class="keyword">for</span> copying conditions.  There <span class="keyword">is</span> NO</span><br><span class="line">warranty; <span class="keyword">not</span> even <span class="keyword">for</span> MERCHANTABILITY <span class="keyword">or</span> FITNESS <span class="keyword">FOR</span> A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$arm       <span class="comment">#再按下tab键是否有如下输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line">arm2hpdl                  arm-<span class="literal">none</span>-eabi-gcc<span class="number">-5.4</span><span class="number">.1</span>   arm-<span class="literal">none</span>-eabi-ld.bfd</span><br><span class="line">arm-<span class="literal">none</span>-eabi-addr2line   arm-<span class="literal">none</span>-eabi-gcc-ar      arm-<span class="literal">none</span>-eabi-nm</span><br><span class="line">arm-<span class="literal">none</span>-eabi-ar          arm-<span class="literal">none</span>-eabi-gcc-nm      arm-<span class="literal">none</span>-eabi-objcopy</span><br><span class="line">arm-<span class="literal">none</span>-eabi-<span class="keyword">as</span>          arm-<span class="literal">none</span>-eabi-gcc-ranlib  arm-<span class="literal">none</span>-eabi-objdump</span><br><span class="line">arm-<span class="literal">none</span>-eabi-c++         arm-<span class="literal">none</span>-eabi-gcov        arm-<span class="literal">none</span>-eabi-ranlib</span><br><span class="line">arm-<span class="literal">none</span>-eabi-c++filt     arm-<span class="literal">none</span>-eabi-gcov-tool   arm-<span class="literal">none</span>-eabi-readelf</span><br><span class="line">arm-<span class="literal">none</span>-eabi-cpp         arm-<span class="literal">none</span>-eabi-gdb         arm-<span class="literal">none</span>-eabi-size</span><br><span class="line">arm-<span class="literal">none</span>-eabi-elfedit     arm-<span class="literal">none</span>-eabi-gdb-py      arm-<span class="literal">none</span>-eabi-strings</span><br><span class="line">arm-<span class="literal">none</span>-eabi-g++         arm-<span class="literal">none</span>-eabi-gprof       arm-<span class="literal">none</span>-eabi-strip</span><br><span class="line">arm-<span class="literal">none</span>-eabi-gcc         arm-<span class="literal">none</span>-eabi-ld</span><br></pre></td></tr></table></figure>
<p>cmake 安装：</p>
<blockquote>
<p> <a href="https://cmake.org/" target="_blank" rel="external">官网下载</a> </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> cmake-3.9.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash">./configure</span></span><br><span class="line"><span class="meta">$</span><span class="bash">make</span></span><br><span class="line"><span class="meta">$</span><span class="bash">make install //在/usr/<span class="built_in">local</span>/bin可以看到cmake可执行程序，添加cmake到PATH环境变量中</span></span><br><span class="line"><span class="meta">$</span><span class="bash">cmake --version //查看版本为3.9.0</span></span><br></pre></td></tr></table></figure>
<h3 id="编译px４"><a href="#编译px４" class="headerlink" title="编译px４"></a>编译px４</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~</span><br><span class="line">mkdir -p ~<span class="string">/src</span></span><br><span class="line"><span class="keyword">cd</span> ~<span class="string">/src</span></span><br><span class="line">git clone https:<span class="string">//github.com/PX4/Firmware.git</span></span><br><span class="line"><span class="keyword">cd</span> Firmware</span><br><span class="line">git submodule update <span class="params">--init</span> <span class="params">--recursive</span></span><br><span class="line"></span><br><span class="line">make px4fmu-v2_default      <span class="comment">#也可执行v3版本:make px4fmu-v3_default</span></span><br></pre></td></tr></table></figure>
<p>编译的二进制程序就会通过USB上传到飞控硬件:</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">make px<span class="number">4f</span>mu-v<span class="number">2_</span><span class="keyword">default</span> upload</span><br></pre></td></tr></table></figure>
<h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><ul>
<li>error:ld returned 1 exit status<blockquote>
<p>不能直接对源代码进行编译，直接编译可能会出现内存溢出的错误error:ld returned 1 exit status，原因是arm-none-eabi 4.7.4版本不对，需要重新安装arm-none-eabi直接编译失败的结果显示如下:</p>
</blockquote>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">collect2</span><span class="selector-class">.exe</span><span class="selector-pseudo">:error</span><span class="selector-pseudo">:ld</span> <span class="selector-tag">returned</span> 1 <span class="selector-tag">exit</span> <span class="selector-tag">status</span></span><br><span class="line"><span class="selector-tag">make</span><span class="selector-attr">[3]</span>: *** <span class="selector-attr">[src/firmware/nuttx/firmware_muttx]</span> <span class="selector-tag">Error</span> 1</span><br><span class="line"><span class="selector-tag">make</span><span class="selector-attr">[2]</span>: *** <span class="selector-attr">[src/firmware/nuttx/CMakeFiles/firmware_muttx.dir/all]</span> <span class="selector-tag">Error</span> 2</span><br><span class="line"><span class="selector-tag">make</span><span class="selector-attr">[1]</span>: *** <span class="selector-attr">[all]</span> <span class="selector-tag">Error</span> 2</span><br><span class="line"><span class="selector-tag">make</span>: *** <span class="selector-attr">[px4fmu-v2_default]</span> <span class="selector-tag">Error</span> 2</span><br></pre></td></tr></table></figure>
<ul>
<li><p>提示cmake 错误</p>
<blockquote>
<p>如果出现了类似错误，是由于cmake版本过低造成的，使用apt-get安装的cmake版本为3.2.2，而在3.3版本以下就会报这个错误，如果出现无法进入文件夹的错误也是这个问题：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CMake <span class="builtin-name">Error</span> at platforms/nuttx/NuttX/CMakeLists.txt:113 (add_dependencies):</span><br><span class="line">  add_dependencies Cannot <span class="builtin-name">add</span> target-level dependencies <span class="keyword">to</span><span class="built_in"> INTERFACE </span>library</span><br><span class="line">  target <span class="string">"nuttx_build"</span>.</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>内存溢出</p>
<blockquote>
<p>解决方案：移除不是必要的模块. 配置在这里. 为了移除一个模块, 可以直接注释掉它:<br>对于FMUv2(Pixhawk1)或者FMUv3(Pixhawk 2)硬件，找到Firmware/cmake/configs/nuttx_px4fmu-v2_default.cmake<br>修改为注释掉不要的driver 如<code>#drivers/trone</code>  或者使用<code>v3</code>版本 <code>make px4fmu-v3_default</code> </p>
</blockquote>
</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">..regin 'falsh ' overflowby <span class="number">34234</span> bytes</span><br><span class="line">collect2.exe:<span class="built_in">error</span>:ld returned <span class="number">1</span> exit status</span><br><span class="line"><span class="built_in">make</span>[<span class="number">3</span>]: *** [src/firmware/nuttx/firmware_muttx] <span class="built_in">Error</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">make</span>[<span class="number">2</span>]: *** [src/firmware/nuttx/CMakeFiles/firmware_muttx.dir/all] <span class="built_in">Error</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">make</span>[<span class="number">1</span>]: *** [all] <span class="built_in">Error</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">make</span>: *** [px4fmu-v2_default] <span class="built_in">Error</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>px4</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World2</title>
    <url>/2018/02/03/hello-world2/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>MD技巧</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/02/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>MD技巧</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim终极配置</title>
    <url>/2018/02/10/Vim%E7%BB%88%E6%9E%81%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="图省事的配置"><a href="#图省事的配置" class="headerlink" title="图省事的配置"></a>图省事的配置</h4><p><a href="https://github.com/sakurazhu/vim" target="_blank" rel="external">github_web</a></p>
<h4 id="经典配置"><a href="#经典配置" class="headerlink" title="经典配置"></a>经典配置</h4><blockquote>
<p>spf13-vim +YouCompleteMe<br>spf13-vim+neocomplete  (推荐)</p>
</blockquote>
<ol>
<li><p>spf13-vim 安装</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ curl http<span class="variable">s:</span>//<span class="keyword">j</span>.mp/spf13-vim3 -L &gt; spf13-<span class="keyword">vim</span>.<span class="keyword">sh</span> &amp;&amp; <span class="keyword">sh</span> spf13-<span class="keyword">vim</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>YouCompleteMe 安装<br><a href="https://www.bbsmax.com/A/LPdoMe6jJ3/" target="_blank" rel="external">安装教程网址</a><br><code>2.1.1</code> 在spf13中指定安装YouCompleteMe插件也很方便，只需要在文件~/.vimrc.before.local中添加下面一行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:spf13_bundle_groups</span>=[<span class="string">'general'</span>, <span class="string">'youcompleteme'</span>] </span><br><span class="line">或 <span class="keyword">let</span> <span class="variable">g:spf13_bundle_groups</span>[<span class="string">'general'</span>, <span class="string">'writing'</span>, <span class="string">'neocomplcache'</span>, <span class="string">'programming'</span>, <span class="string">'php'</span>, <span class="string">'ruby'</span>, <span class="string">'python'</span>, <span class="string">'javascript'</span>, <span class="string">'html'</span>, <span class="string">'misc'</span>, <span class="string">'youcompleteme'</span>, ]</span><br><span class="line">或 在.vimrc 中加入 Bundle <span class="string">'Valloric/YouCompleteMe'</span></span><br></pre></td></tr></table></figure>
<p>然后采用Vundle命令安装</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>vim</span><br><span class="line">在vim中输入 </span><br><span class="line"><span class="symbol">:BundleInstall!</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>或<code>源码安装</code><br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle</span></span><br><span class="line">git clone https:<span class="string">//github.com/Valloric/YouCompleteMe.git</span></span><br><span class="line"><span class="keyword">cd</span> YouCompleteMe</span><br><span class="line">git submodule update <span class="params">--init</span> <span class="params">--recursive</span></span><br><span class="line"><span class="string">./install.sh</span> <span class="params">--clang-completer</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><code>2.1.2</code> 编译ycm_core.so</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe/</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--all</span> <span class="comment">#编译支持所有功能</span></span><br><span class="line">or</span><br><span class="line"><span class="string">./install.py</span> <span class="params">--clang-completer</span> <span class="comment">#只支持C/C++补全</span></span><br></pre></td></tr></table></figure>
<p><code>2.1.3</code> YouCompleteMe配置<br>   <code>.vimr</code>或<code>.vimrc.local</code>配置添加<br><a href="http://howiefh.github.io/2015/05/22/vim-install-youcompleteme-plugin/" target="_blank" rel="external">参考网址</a><br><a href="https://zhuanlan.zhihu.com/p/33046090" target="_blank" rel="external">参考网址</a><br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">"</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">g:acp_enableAtStartup</span> = <span class="number">0</span></span><br><span class="line">            <span class="comment">" global conf which is needed to resolve name in system include</span></span><br><span class="line">            <span class="comment">" file or other  third-part include file</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">g:ycm_global_ycm_extra_conf</span> = <span class="string">'~/.vim/.ycm_extra_conf.py'</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">g:ycm_server_python_interpreter</span>=<span class="string">'/usr/bin/python'</span></span><br><span class="line">            <span class="comment">" enable completion from tags</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">g:ycm_collect_identifiers_from_tags_files</span> = <span class="number">1</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">g:ycm_seed_identifiers_with_syntax</span> = <span class="number">1</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">g:ycm_confirm_extra_conf</span> = <span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">g:ycm_cache_omnifunc</span>=<span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">g:ycm_key_invoke_completion</span> = <span class="string">'&lt;C-;&gt;'</span></span><br><span class="line">           <span class="comment">" nnoremap &lt;F5&gt; :YcmForceCompileAndDiagnostics&lt;CR&gt;</span></span><br><span class="line">            <span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinitionElseDeclaration<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"> 把nerdtree绑定到F5上</span><br><span class="line">            <span class="keyword">let</span> NERDTreeChDirMode = <span class="number">2</span></span><br><span class="line">            <span class="keyword">let</span> NERDTreeWinSize = <span class="number">30</span></span><br><span class="line">            <span class="keyword">nmap</span> <span class="symbol">&lt;F5&gt;</span>  :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span> </span><br><span class="line"></span><br><span class="line">  缩进看起来一块一块的，比较难看，我习惯默认关闭它,可以通过<span class="symbol">&lt;Leader&gt;</span>ig来开启</span><br><span class="line">           <span class="keyword">let</span> <span class="variable">g:indent_guides_auto_colors</span> = <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">   一般把tagbar绑在<span class="symbol">&lt;F6&gt;</span>上</span><br><span class="line">           <span class="keyword">nnoremap</span> <span class="symbol">&lt;F6&gt;</span> :TagbarToggle<span class="symbol">&lt;CR&gt;</span> </span><br><span class="line">           <span class="keyword">let</span> <span class="variable">g:tagbar_autoclose</span>=<span class="number">1</span> <span class="comment">"在一个tag上按回车后，自动跳转到tag在文件的位置，并关闭tagbar</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>!</code>上面配置中全局.ycm_extra_conf.py路径很重要，如果不配置将无法解析C/C++头文件</p>
</blockquote>
<p>.ycm_extra_conf.py 模版位于YouCompleteMe/third_party/ycmd/cpp/ycm/，其中-isystem flag用来配置系统头文件路径，-I用来配置第三方头文件路径, 一个支持C/C++工程的ycm_extra_conf.py部分配置文件修改添加如下：<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="string">'-std=c++11'</span>,</span><br><span class="line">#<span class="string">'-std=c99'</span>,</span><br><span class="line"># ...<span class="built_in">and</span> the same thing goes <span class="keyword">for</span> the magic -<span class="keyword">x</span> option which specifies the</span><br><span class="line"># <span class="keyword">language</span> that the <span class="keyword">files</span> <span class="keyword">to</span> <span class="keyword">be</span> compiled are written in. This <span class="keyword">is</span> mostly</span><br><span class="line"># relevant <span class="keyword">for</span> <span class="keyword">c</span>++ headers.</span><br><span class="line"># For <span class="keyword">a</span> C project, you would <span class="keyword">set</span> this <span class="keyword">to</span> <span class="string">'c'</span> instead of <span class="string">'c++'</span>.</span><br><span class="line"><span class="string">'-x'</span>,</span><br><span class="line"><span class="string">'c++'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'../BoostParts'</span>,</span><br><span class="line">#-isystem: <span class="built_in">system</span> include <span class="keyword">file</span> path按照自己的头文件添加iinclude路径</span><br><span class="line"><span class="string">'-isystem'</span>, <span class="string">'/usr/include'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>, <span class="string">'/usr/local/include'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>, <span class="string">'/usr/include/c++/4.8.4'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,<span class="string">'/usr/include/x86_64-linux-gnu/c++'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<hr>
<p>2.2 基于vundle安装<br><a href="https://www.cnblogs.com/274914765qq/p/4439189.html" target="_blank" rel="external">参考网址</a><br>使用vundle进行安装，在<code>.vimrc</code>中添加如下代码<br><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">Bundle 'Valloric/YouCompleteMe'   <span class="string">"或直接在vim ：中输入 Bundle 'Valloric/YouCompleteMe'</span></span><br></pre></td></tr></table></figure></p>
<p>保存退出后打开vim，在正常模式下输入<br><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:BundleInstall</span></span><br></pre></td></tr></table></figure></p>
<p>等待vundle将YouCompleteMe安装完成，而后需要进行编译安装<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.sh</span> <span class="params">--clang-completer</span></span><br></pre></td></tr></table></figure></p>
<p>在.vimrc中对YouCompleteMe的配置如下<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">" YouCompleteMe配置</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_error_symbol</span> = <span class="string">'&gt;&gt;'</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_warning_symbol</span> = <span class="string">'&gt;*'</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>gl :YcmCompleter GoToDeclaration<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>gf :YcmCompleter GoToDefinition<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>gg :YcmCompleter GoToDefinitionElseDeclaration<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;F4&gt;</span> :YcmDiags<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>nmap<c-a> :YcmCompleter FixIt<cr>  </cr></c-a></p>
<h5 id="自动补全法2"><a href="#自动补全法2" class="headerlink" title="自动补全法2"></a>自动补全法2</h5><p>因为安装<code>YouCompleteMe</code>太麻烦了，可能会安装<code>jedi-vim</code>代替;不过推荐使用neocomplete<br>在.vimrc 添加 jedi-vim 和 supertab<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">call</span> vundle#begin()  </span><br><span class="line">...  </span><br><span class="line"> Bundle <span class="string">'davidhalter/jedi-vim'</span>  </span><br><span class="line"> Bundle <span class="string">'ervandew/supertab'</span>  </span><br><span class="line">...  </span><br><span class="line"> <span class="keyword">call</span> vundle#end()            <span class="comment">" required  </span></span><br><span class="line"> <span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br></pre></td></tr></table></figure></p>
<p> 打开 vim 使用 :PluginInstall 命令安装插件<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/.<span class="keyword">vim</span>/bundle/jedi-<span class="keyword">vim</span>/ &amp;&amp; git submodule <span class="keyword">update</span> --init</span><br></pre></td></tr></table></figure></p>
<p> 在 .vimrc 添加<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> g:<span class="attr">SuperTabDefaultCompletionType</span> = <span class="string">"context"</span>  </span><br><span class="line"><span class="keyword">let</span> g:jedi<span class="comment">#popup_on_dot = 0</span></span><br></pre></td></tr></table></figure></p>
<p><strong><code>neocomplete安装</code></strong><br> <code>$vim --version</code>  查看是否有 +lua ,没有则需要 sudo apt-get install lua-devel 再重新安装vim</p>
<blockquote>
<p> <a href="https://github.com/Shougo/neocomplete.vim]" target="_blank" rel="external">下载网址</a><br>   拷贝到～/.vim<br>   .vimrc添加  let g:neocomplcache_enable_at_startup = 1</p>
</blockquote>
<p>  官网的Configuration Examples可以用</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li>YouCompleteMe unavailable : requires Vim 7.4.143<br>vim 版本不够新需要升级<br>查看下vim版本<code>$vim --version</code><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:jonathonf/vim </span><br><span class="line">sudo apt update </span><br><span class="line">sudo apt install vim </span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:jonathonf/vim</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果还不行，进行如下操作：sudo apt-get -u dist-upgrade（强制更新软件包到最新版本，并自动解决缺少的依赖包） ，问题解决。在不行就下载vim源码安装</p>
<ol>
<li>ctags not found</li>
</ol>
<p>在安装spf13集合包时，个人的ubuntu 系统并没有安装ctags，造成Tagbar插件未能成功安装。<br>所以在安装好ctags后，重新运行 BundleInstall，此时Tagbar插件才真正落户安家，发挥作用。</p>
<ol>
<li><p>vim 有些卡<br>vim -f<br>gvim -f</p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><a href="http://conglang.github.io/2015/04/06/spf13-vim-cheat-sheet/" target="_blank" rel="external">参考网址</a></p>
</li>
<li><p>NERDTree</p>
</li>
</ol>
<p>NERDTree 是一个文件浏览器。<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">e</span>	打开/关闭NERDTree   或 <span class="symbol">&lt;Leader&gt;</span><span class="keyword">e</span>方式     ,<span class="keyword">e</span></span><br><span class="line">?	显示快速帮助</span><br><span class="line"><span class="keyword">o</span>或Ctrl+R	打开文件、目录和书签</span><br><span class="line"><span class="keyword">go</span>	打开选中文件，不过光标仍在NERDTree中</span><br><span class="line">t	在新<span class="keyword">tab</span>中打开选中节点/书签</span><br><span class="line">T	功能与t相同，不过焦点仍在当前<span class="keyword">tab</span></span><br><span class="line">i	在新<span class="keyword">split</span>打开选中文件</span><br><span class="line">gi	与i相同，不过光标仍在NERDTree中</span><br><span class="line">s	在新<span class="keyword">vsplit</span>中打开选中文件</span><br><span class="line">gs	与s相同，不过光标仍在NERDTree中</span><br><span class="line">O	打开选中目录所有子目录</span><br><span class="line"><span class="keyword">x</span>	关闭当前节点父节点</span><br><span class="line"><span class="keyword">X</span>	关闭当前节点所有子节点</span><br><span class="line">D	删除当前书签</span><br><span class="line"><span class="keyword">P</span>	跳到根节点</span><br><span class="line"><span class="keyword">p</span>	跳到当前节点父节点</span><br><span class="line">K	跳到本层级第一个节点</span><br><span class="line">J	跳到本层级最后一个节点</span><br><span class="line">C	设置选中目录为根结点</span><br><span class="line"><span class="keyword">u</span>	根结点向上跳出一级</span><br><span class="line">U	与<span class="keyword">u</span>相同，只是老根结点保持打开</span><br><span class="line">r	刷新当前目录所有子目录</span><br><span class="line">R	刷新当前根目录所有子目录</span><br><span class="line"><span class="keyword">m</span>	显示NERDTree的菜单</span><br><span class="line"><span class="keyword">cd</span>	将当前工作目录改为选中节点</span><br><span class="line">CD	将根结点改为当前工作目录</span><br><span class="line"><span class="keyword">f</span>	切换是否打开文件过滤</span><br><span class="line">F	切换是否显示文件</span><br><span class="line">B	切换书签列表是否显示</span><br><span class="line">A	最大最小化NERDTree窗口</span><br><span class="line">:<span class="keyword">help</span> NERDTree	NERDTree帮助手册</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>EasyMotion<br>快速行跳转<br>快速字跳转</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">,,w	当前光标后的所有word，提供快捷键跳转</span><br><span class="line">,,b	当前光标前的所有word，提供快捷键跳转</span><br><span class="line">,,j	当前光标后的所有行，提供快捷键跳转</span><br><span class="line">,,k	当前光标后的所有行，提供快捷键跳转</span><br></pre></td></tr></table></figure>
</li>
<li><p>ctags<br>实现各种函数/变量跳转至各自声明处。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">ctrl+]	当前光标处<span class="built_in">word</span>，跳转至相同名称的函数处或者变量声明处</span><br><span class="line">ctrl+t	跳转的返回</span><br><span class="line">g]	当前光标处<span class="built_in">word</span>，跳转至相同名称的函数处或者变量声明处，不同与ctrl+]，会列出所有相同名称的标签文件</span><br><span class="line"></span><br><span class="line">,tt     打开tagbar界面</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>可手动设置快捷键：<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;F3&gt;</span>   <span class="symbol">&lt;ctrl-T&gt;</span>  </span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;F4&gt;</span>   &lt;ctrl-]&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>tagbar 设置<br>   F6进入，上下移动 (jk), 选中回车后会跳转。通过 help:tagbar 可以查看tagbar的说明文档<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">" tagbar</span></span><br><span class="line"><span class="comment">"Bundle 'majutsushi/tagbar'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;F6&gt;</span> :TagbarToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">" tagbar默认去这个目录中寻找ctags，ctags的默认安装路径也是这个目录</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_autoclose</span>=<span class="number">1</span> <span class="comment">"在一个tag上按回车后，自动跳转到tag在文件的位置，并关闭tagbar</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_ctags_bin</span>=<span class="string">'/usr/bin/ctags'</span>  <span class="comment">" Proper Ctags locations</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_width</span>=<span class="number">26</span>                      <span class="comment">" Default is 40, seems too wide</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">y</span> :TagbarToggle<span class="symbol">&lt;CR&gt;</span>        <span class="comment">" Display panel with (,y)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 启动 时自动focus</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_autofocus</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" for ruby, delete if you do not need</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_type_ruby</span> = &#123;</span><br><span class="line">    \ <span class="string">'kinds'</span> : [</span><br><span class="line">        \ <span class="string">'m:modules'</span>,</span><br><span class="line">        \ <span class="string">'c:classes'</span>,</span><br><span class="line">        \ <span class="string">'d:describes'</span>,</span><br><span class="line">        \ <span class="string">'C:contexts'</span>,</span><br><span class="line">        \ <span class="string">'f:methods'</span>,</span><br><span class="line">        \ <span class="string">'F:singleton methods'</span></span><br><span class="line">    \ ]</span><br><span class="line">\ &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li>NERDCommenter注释工具<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">,<span class="keyword">c</span><span class="symbol">&lt;Space&gt;</span>	切换当前行或选中内容是否注释，根据首行判断</span><br><span class="line">,ci	切换当前行或选中内容是否注释，每行自己判断</span><br><span class="line">,<span class="keyword">cs</span>	有格式地注释</span><br><span class="line">,cy	复制内容，然后注释</span><br><span class="line">,<span class="keyword">ca</span>	在行末添加注释符并进入<span class="keyword">insert</span> <span class="keyword">mode</span></span><br><span class="line">,<span class="keyword">cl</span>	在行首添加注释符并进入<span class="keyword">insert</span> <span class="keyword">mode</span></span><br><span class="line">,<span class="keyword">ca</span>	在两种注释符之间切换，如/**/和//</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>VIM</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2018/02/06/test/</url>
    <content><![CDATA[<p>   生命的意义是什么<br>   你猜啊<br><a id="more"></a></p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol>
<li>第一节</li>
</ol>
<ul>
<li>第二节(你不用敲 “2”，自动就有了）<ul>
<li>第一小节（推荐每层次缩进四个空格）<ul>
<li>小小节 1</li>
<li>小小节 2</li>
</ul>
</li>
<li>第二小节<ul>
<li>小小节 1</li>
<li>小小节 2<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4></li>
</ul>
</li>
</ul>
</li>
<li>1</li>
<li>2</li>
<li>3<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4></li>
</ul>
<ol>
<li>1</li>
<li>3</li>
<li>3<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3>代码块语法遵循标准markdown代码，例如：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href="http://math.stackexchange.com/" target="_blank" rel="external">math.stackexchange.com</a>.</p>
<ul>
<li>行内公式，数学公式为：$ \textbf{y} = sigmoid(\textbf{A}\times \textbf{x} + \textbf{b})$。</li>
<li><p>块级公式：</p>
<p> $ \textbf{y} = sigmoid(\textbf{A}\times \textbf{x} + \textbf{b})$</p>
</li>
</ul>
<p>更多LaTex语法请参考 [这儿][3].</p>
<h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><ol>
<li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li>
<li>IE９以下不支持</li>
<li>IE９，１０，１１存在以下问题<ol>
<li>不支持离线功能</li>
<li>IE9不支持文件导入导出</li>
<li>IE10不支持拖拽文件导入<h3 id="离线写博客"><a href="#离线写博客" class="headerlink" title="离线写博客"></a>离线写博客</h3></li>
</ol>
</li>
</ol>
<p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href="http://write.blog.csdn.net/mdeditor" target="_blank" rel="external">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p>
<p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p>
<p>博客发表后，本地缓存将被删除。　</p>
<p>用户可以选择 <i class="icon-disk"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p>
<blockquote>
<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p>
</blockquote>
<p>   对于本地图片必须放在test文件夹下,文件夹与文章名test相同<br>   <img src="/2018/02/06/test/bg1.jpeg" alt="ddd" title="oyes"><br>   网络图片<br>   <img src="https://s1.ax1x.com/2017/11/09/BOgeg.jpg" alt="BOgeg" title="good"><br>   插入音乐<br>   <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32"></iframe></p>
<hr>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>MD技巧</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>test2</title>
    <url>/2017/11/10/test2/</url>
    <content><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center">我们需要如此么</blockquote>

<!-- 标签 方式，要求版本在0.4.5或以上 -->
<blockquote class="blockquote-center"><p>你去问上帝吧</p>
</blockquote>
<!-- 标签别名 -->
<blockquote class="blockquote-center"><p>它不会放过你的 </p>
</blockquote>
<p>随便写点什么冲数！</p>
<ul>
<li><i class="fa fa-pencil"></i>支持Markdown<br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li>
<li><i class="fa fa-cloud-upload"></i>一件部署<br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li>
<li><i class="fa fa-cog"></i>丰富的插件<br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li>
</ul>
]]></content>
      <categories>
        <category>很通</category>
      </categories>
      <tags>
        <tag>它不是人</tag>
        <tag>她是人</tag>
      </tags>
  </entry>
  <entry>
    <title>yolo训练自己的样本库</title>
    <url>/2018/02/10/yolo%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%BA%93/</url>
    <content><![CDATA[<h3 id="YOLO-训练笔记"><a href="#YOLO-训练笔记" class="headerlink" title="YOLO 训练笔记"></a>YOLO 训练笔记</h3><hr>
<h4 id="labelImg-安装"><a href="#labelImg-安装" class="headerlink" title="labelImg 安装"></a>labelImg 安装</h4><p><a href="http://tzutalin.github.io/labelImg/" target="_blank" rel="external">参考网址下载</a><br>  <code>labelImg</code>图片标注工具用于生成xml,用于yolo训练label数据生成可执行文件存放路径不要有中文。使用前请将data目录下的txt文件修改成自己所需的类别，请用notepad++等打开。</p>
<ol>
<li><p><strong>ubuntu</strong><br> <a href="https://github.com/tzutalin/labelImg" target="_blank" rel="external">参考github安装教程</a></p>
</li>
<li><p><strong>windows</strong></p>
</li>
</ol>
<p>在anaconda4.2.0 中安装pyqt4<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">conda install <span class="attribute">pyqt</span>=4</span><br></pre></td></tr></table></figure></p>
<p>或直接使用.exe文件(推荐)<br>        <a href="http://blog.csdn.net/samylee/article/details/77966660?locationNum=10&amp;fps=1" target="_blank" rel="external">参考教程</a></p>
<p>对于python3.5<br>        <a href="http://blog.csdn.net/u010807846/article/details/73480628" target="_blank" rel="external">参考教程</a><br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> PyQt5 </span><br><span class="line">pip <span class="keyword">install</span> pyqt5-tools</span><br></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">pyrcc4 -o resources<span class="selector-class">.py</span> resources.qrc</span><br><span class="line">python labelImg.py</span><br></pre></td></tr></table></figure></p>
<h4 id="编译测试darknet工程"><a href="#编译测试darknet工程" class="headerlink" title="编译测试darknet工程"></a>编译测试darknet工程</h4><p>具体不在描述</p>
<h4 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h4><p>(1) 图片文件库<br>(2) xml文件库<br>(3) train.txt 文件,内容为所有图片小数点前名,如10004</p>
<blockquote>
<p>xml的生成可以使用labelImage 软件标注生成，xml文件名要求与对应图片文件名相同<br>xml信息主要有图片的长宽、类别名、类别的矩形框的左上角和右下角坐标<br>train.txt自己写个程序生成,在这里我的为imgprocess.py</p>
<h5 id="处理数据库"><a href="#处理数据库" class="headerlink" title="处理数据库"></a>处理数据库</h5><p>为了偷懒，准备使用voc结构训练，需要将准备的数据库做成voc数据库结构<br><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">-voc</span></span><br><span class="line"><span class="ruby">   --VOCdevkit</span></span><br><span class="line"><span class="ruby">        --VOCsaobin</span></span><br><span class="line"><span class="ruby">           --Annotations</span></span><br><span class="line"><span class="ruby">	       --<span class="number">10004</span>.xml</span></span><br><span class="line"><span class="ruby">               --<span class="number">10005</span>.xml</span></span><br><span class="line"><span class="ruby">                   ... </span></span><br><span class="line"><span class="ruby">           --ImageSets</span></span><br><span class="line"><span class="ruby">               --Main </span></span><br><span class="line"><span class="ruby">                   --train.txt</span></span><br><span class="line"><span class="ruby">	           --test.txt</span></span><br><span class="line"><span class="ruby">                   --val.txt</span></span><br><span class="line"><span class="ruby">            --JPEGImages</span></span><br><span class="line"><span class="ruby">                   --<span class="number">10004</span>.jpg</span></span><br><span class="line"><span class="ruby">                   --<span class="number">10005</span>.jpg</span></span><br><span class="line"><span class="ruby">    --voc_label.py</span></span><br></pre></td></tr></table></figure></p>
<p>将图片放入JPEGImages中<br>    xml放入Annotations文件夹中<br>    train.txt中将20% 20%数据剪切到test.txt val.txt,再将train.txt test.txt val.txt放入Main文件夹中<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">voc_label.py中修改:</span><br><span class="line">	<span class="keyword">sets</span>=[(<span class="string">'saobin'</span>, <span class="string">'train'</span>), (<span class="string">'saobin'</span>, <span class="string">'test'</span>),(<span class="string">'saobin'</span>, <span class="string">'val'</span>)]</span><br><span class="line">    classes <span class="comment">= [</span><span class="comment">"nan"</span><span class="comment">,</span><span class="comment">"nv"</span><span class="comment">]   #</span>类别名字</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>将voc文件夹放入data/　下  　　<br>运行voc_label.py:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> data/voc</span></span><br><span class="line"><span class="meta">$</span><span class="bash">python voc_label.py</span></span><br></pre></td></tr></table></figure></p>
<p> 查看运行后生成文件:<br>         voc/ 目录下会新生成  <code>saobin_train.txt  saobin_test.txt    saobin_val.txt</code><br>         Vocsaobin/ 目录下新生成 <code>labels</code><br><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">-labels</span></span><br><span class="line"><span class="ruby">   --<span class="number">10004</span>.txt</span></span><br><span class="line"><span class="ruby">   --<span class="number">10005</span>.txt</span></span><br><span class="line"><span class="ruby">   ...</span></span><br></pre></td></tr></table></figure></p>
<p>因为我们并没有用到val验证,所以将val数据集加入训练集:<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cd</span> voc</span><br><span class="line"><span class="variable">$cat</span> saobin_train<span class="selector-class">.txt</span> saobin_val<span class="selector-class">.txt</span> &gt;train.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="准备训练"><a href="#准备训练" class="headerlink" title="准备训练"></a>准备训练</h4><p>  修改cfg/voc.data:<br>     在这里我们只训练2类,<code>&lt;path-to-voc&gt;</code>数集的绝对路径代替为/home/keetsky/darknet/data/voc<br>     <code>names</code>为类别名,<code>backup</code>为训练权重数据保存路径<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">classes</span>= <span class="number">2</span>      </span><br><span class="line"><span class="attr">train</span>  = &lt;path-to-voc&gt;/train.txt</span><br><span class="line"><span class="attr">valid</span>  = &lt;path-to-voc&gt;saobin_test.txt</span><br><span class="line"><span class="attr">names</span> = data/voc.names</span><br><span class="line"><span class="attr">backup</span> = backup</span><br></pre></td></tr></table></figure></p>
<p>修改data/voc.names:在这里训练2类<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nan</span></span><br><span class="line"><span class="attribute">nv</span></span><br></pre></td></tr></table></figure></p>
<p>修改cfg/yolo-voc.cfg:<br>修改batch使计算机能够运行的数(参数可重大到小运行程序试到程序能运行),max_batches训练轮数<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">[net]</span><br><span class="line">batch=25 </span><br><span class="line">max_batches = 45000</span><br><span class="line">...</span><br><span class="line">[region]</span><br><span class="line">classes=2   <span class="comment">#改为两类</span></span><br></pre></td></tr></table></figure></p>
<p>修改[region]前一[convolutional],因为在这里只识别两类，将filters改为35<br><code>（filter的公式filters=(classes+ coords+ confidence)* (NUM)    (2+4+1)*5=35</code><br>  解释下最后层filers:yolo2采用Anchor Boxes,最后层13x13xfilter</p>
<blockquote>
<p> classes:类别数<br>      coords:坐标<br>      confidence:概率（置信度）<br>      NUM:anchor boxes数,这里采用5个即预测建议框,也可修改其他<br>　　　　一个boxes：[坐标＋框confidence＋每个类别的概率]=[x,y,w,h,0.75,0.45,0.78]</p>
</blockquote>
<h4 id="下载前训练完成模型"><a href="#下载前训练完成模型" class="headerlink" title="下载前训练完成模型"></a><a href="https://pjreddie.com/darknet/imagenet/#extraction" target="_blank" rel="external">下载前训练完成模型</a></h4><p>下载<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$wget</span> https:<span class="comment">//pjreddie.com/media/files/darknet19_448.conv.23</span></span><br><span class="line"></span><br><span class="line">或自己训练（https:<span class="comment">//pjreddie.com/darknet/imagenet/#darknet19_448）</span></span><br><span class="line">./darknet partial cfg/darknet19_448<span class="selector-class">.cfg</span> darknet19_448<span class="selector-class">.weights</span> darknet19_448<span class="selector-class">.conv</span>.<span class="number">23</span> <span class="number">23</span></span><br></pre></td></tr></table></figure></p>
<h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>开始训练</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$./darknet detector train cfg/voc<span class="selector-class">.data</span> cfg/yolo-voc<span class="selector-class">.cfg</span> darknet19_448<span class="selector-class">.conv</span>.<span class="number">23</span></span><br></pre></td></tr></table></figure>
<p>如果需要限定gpu数量进行训练<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$./darknet detector train cfg/voc<span class="selector-class">.data</span> cfg/yolo-voc<span class="selector-class">.cfg</span> darknet19_448<span class="selector-class">.conv</span>.<span class="number">23</span> -gpus <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>  从backup恢复中断的训练,比如从第700轮恢复训练<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$./darknet detector train cfg/voc<span class="selector-class">.data</span> cfg/yolo-voc<span class="selector-class">.cfg</span> backup/yolo-voc_700.weights</span><br></pre></td></tr></table></figure></p>
<h4 id="训练后测试"><a href="#训练后测试" class="headerlink" title="训练后测试"></a>训练后测试</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$./darknet detector test cfg/voc<span class="selector-class">.data</span> cfg/yolo-voc<span class="selector-class">.cfg</span> backup/yolo-voc_final<span class="selector-class">.weights</span> testpicture/<span class="number">001</span><span class="selector-class">.jpg</span>      #测试图片</span><br><span class="line">$./darknet detector demo cfg/voc<span class="selector-class">.data</span> cfg/yolo-voc<span class="selector-class">.cfg</span> backup/yolo-voc_final<span class="selector-class">.weights</span>  test<span class="selector-class">.avi</span>  #测试视频</span><br></pre></td></tr></table></figure>
<p>  也可加载中间的模型参数如 yolo-voc_1000.weights</p>
<h4 id="定制模型"><a href="#定制模型" class="headerlink" title="定制模型"></a>定制模型</h4><p>  自己可设计网络结构进行训练,需要修改cfg/yolo-voc.cfg成自己的结构</p>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>yolo</tag>
      </tags>
  </entry>
</search>
